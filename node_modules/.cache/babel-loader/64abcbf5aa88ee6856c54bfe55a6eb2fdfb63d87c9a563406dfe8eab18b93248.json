{"ast":null,"code":"import * as Yup from \"yup\";\nimport Service from \"./service.js\";\nimport validaCPF from './Validation/validaCpf.js';\nimport validaTelefone from './Validation/validaTelefone.js';\nimport validaCEP from './Validation/validaCep.js';\nimport validPassword from \"./Validation/validPassword.js\";\nexport default class DataFormValidation {\n  static personalDataFormValidation() {\n    return Yup.object({\n      fullName: Yup.string().trim().required('Campo obrigatório.'),\n      gender: Yup.string().required('Campo obrigatório.').oneOf(Service.gender, 'Opção inválida'),\n      birthdate: Yup.date().required('Campo obrigatório.').max(new Date(), 'Data inválida.'),\n      cpf: Yup.string().required('Campo obrigatório.').max(11, 'CPF inválido').matches(/^[\\d]+$/, 'Utilize apenas números.').cpf('CPF inválido.'),\n      telephone: Yup.string().required('Campo obrigatório.').max(11, 'Telefone inválido.').matches(/^[\\d]+$/, 'Utilize apenas números.').telefone('Telefone inválido.')\n    });\n  }\n  static addressFormValidation() {\n    return Yup.object({\n      address: Yup.array().of(Yup.object().shape({\n        residencyType: Yup.string().required('Campo obrigatório.').oneOf(Service.residencyType, 'Opção inválida'),\n        addressType: Yup.string().required('Campo obrigatório.').oneOf(Service.addressType, 'Opção inválida'),\n        cep: Yup.string().required('Campo obrigatório.').max(9, 'CEP inválido.').matches(/^[\\d]+$/, 'Utilize apenas números.').cep('CEP inválido'),\n        address: Yup.string().required('Campo obrigatório.'),\n        city: Yup.string().required('Campo obrigatório.'),\n        state: Yup.string().required('Campo obrigatório.'),\n        country: Yup.string().required('Campo obrigatório.'),\n        number: Yup.string().required('Campo obrigatório.')\n      }))\n    });\n  }\n  static registerFormValidation() {\n    return Yup.object({\n      email: Yup.string().required('Campo obrigatório.').email('Digite um e-mail válido.'),\n      password: Yup.string().required('Campo obrigatório.').min(8, 'Senha deve conter pelo menos 8 caracteres.').password('Senha não atende aos critérios de segurança.'),\n      passwordConfirmation: Yup.string().required('Campo obrigatório.').oneOf([Yup.ref('password'), null], 'As senhas não conferem.')\n    });\n  }\n}\n\n//Yup addMethod CPF validation\nYup.addMethod(Yup.string, 'cpf', function (message) {\n  return this.test('cpf', message, function (cpf) {\n    const {\n      path,\n      createError\n    } = this;\n    return !cpf || validaCPF(cpf) || createError({\n      path,\n      message\n    });\n  });\n});\n//Yup addMethod Telephone validation\nYup.addMethod(Yup.string, 'telefone', function (message) {\n  return this.test('telefone', message, function (telephone) {\n    const {\n      path,\n      createError\n    } = this;\n    return !telephone || validaTelefone(telephone) || createError({\n      path,\n      message\n    });\n  });\n});\n\n//Yup addMethod CEP validation\nYup.addMethod(Yup.string, 'cep', function (message) {\n  return this.test('cep', message, function (cep) {\n    const {\n      path,\n      createError\n    } = this;\n    return !cep || validaCEP(cep) || createError({\n      path,\n      message\n    });\n  });\n});\n\n//Yup addMethod password validation\nYup.addMethod(Yup.string, 'password', function (message) {\n  return this.test('password', message, function (password) {\n    const {\n      path,\n      createError\n    } = this;\n    return !password || validPassword(password) || createError({\n      path,\n      message\n    });\n  });\n});","map":{"version":3,"names":["Yup","Service","validaCPF","validaTelefone","validaCEP","validPassword","DataFormValidation","personalDataFormValidation","object","fullName","string","trim","required","gender","oneOf","birthdate","date","max","Date","cpf","matches","telephone","telefone","addressFormValidation","address","array","of","shape","residencyType","addressType","cep","city","state","country","number","registerFormValidation","email","password","min","passwordConfirmation","ref","addMethod","message","test","path","createError"],"sources":["/Users/patricktobias/Documents/react-form-with-formik-and-yup/src/js/DataFormValidation.js"],"sourcesContent":["import * as Yup from \"yup\";\nimport Service from \"./service.js\";\nimport validaCPF from './Validation/validaCpf.js'\nimport validaTelefone from './Validation/validaTelefone.js'\nimport validaCEP from './Validation/validaCep.js'\nimport validPassword from \"./Validation/validPassword.js\";\n\nexport default class DataFormValidation {\n\n    static personalDataFormValidation() {\n        return Yup.object({\n            fullName: Yup.string().trim().required('Campo obrigatório.'),\n            gender: Yup.string().required('Campo obrigatório.').oneOf(Service.gender, 'Opção inválida'),\n            birthdate: Yup.date().required('Campo obrigatório.').max(new Date(), 'Data inválida.'),\n            cpf: Yup.string().required('Campo obrigatório.').max(11, 'CPF inválido').matches(/^[\\d]+$/, 'Utilize apenas números.').cpf('CPF inválido.'),\n            telephone: Yup.string().required('Campo obrigatório.').max(11, 'Telefone inválido.').matches(/^[\\d]+$/, 'Utilize apenas números.').telefone('Telefone inválido.')\n        })\n    }\n\n    static addressFormValidation() {\n        return Yup.object({\n            address: Yup.array().of(\n                Yup.object().shape({\n                    residencyType: Yup.string().required('Campo obrigatório.').oneOf(Service.residencyType, 'Opção inválida'),\n                    addressType: Yup.string().required('Campo obrigatório.').oneOf(Service.addressType, 'Opção inválida'),\n                    cep: Yup.string().required('Campo obrigatório.').max(9, 'CEP inválido.').matches(/^[\\d]+$/, 'Utilize apenas números.').cep('CEP inválido'),\n                    address: Yup.string().required('Campo obrigatório.'),\n                    city: Yup.string().required('Campo obrigatório.'),\n                    state: Yup.string().required('Campo obrigatório.'),\n                    country: Yup.string().required('Campo obrigatório.'),\n                    number: Yup.string().required('Campo obrigatório.')\n                })\n            )\n        });\n    }\n\n    static registerFormValidation() {\n        return Yup.object({\n            email: Yup.string().required('Campo obrigatório.').email('Digite um e-mail válido.'),\n            password: Yup.string().required('Campo obrigatório.').min(8, 'Senha deve conter pelo menos 8 caracteres.').password('Senha não atende aos critérios de segurança.'),\n            passwordConfirmation: Yup.string().required('Campo obrigatório.').oneOf([Yup.ref('password'), null], 'As senhas não conferem.')\n        });\n    }\n}\n\n//Yup addMethod CPF validation\nYup.addMethod(Yup.string, 'cpf', function (message) {\n    return this.test('cpf', message, function (cpf) {\n        const { path, createError } = this;\n        return !cpf || validaCPF(cpf) || createError({ path, message });\n    });\n});\n//Yup addMethod Telephone validation\nYup.addMethod(Yup.string, 'telefone', function (message) {\n    return this.test('telefone', message, function (telephone) {\n        const { path, createError } = this;\n        return !telephone || validaTelefone(telephone) || createError({ path, message });\n    });\n});\n\n//Yup addMethod CEP validation\nYup.addMethod(Yup.string, 'cep', function (message) {\n    return this.test('cep', message, function (cep) {\n        const { path, createError } = this;\n        return !cep || validaCEP(cep) || createError({ path, message });\n    });\n});\n\n//Yup addMethod password validation\nYup.addMethod(Yup.string, 'password', function (message) {\n    return this.test('password', message, function (password) {\n        const { path, createError } = this;\n        return !password || validPassword(password) || createError({ path, message });\n    })\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}